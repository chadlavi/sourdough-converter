{"version":3,"sources":["Calculator/Calculator.tsx","Display/Display.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Calculator","props","water","flour","setWater","setFlour","onChange","setter","e","newValue","currentTarget","value","replace","className","id","autoComplete","name","type","pattern","numberWithCommas","x","toString","referenceLinks","map","r","key","link","href","rel","target","Display","flourNumber","parseInt","waterNumber","percentage","sourdough","flourResult","Math","round","waterResult","displayData","data","label","title","d","App","React","useState","displayProps","calculatorProps","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uRAUaA,G,YAAa,SAACC,GAAyC,IAEhEC,EAIED,EAJFC,MACAC,EAGEF,EAHFE,MACAC,EAEEH,EAFFG,SACAC,EACEJ,EADFI,SAGIC,EAAW,SACfC,GADe,OAEZ,SAACC,GACJ,IAAMC,EAAWD,EAAEE,cAAcC,MAAMC,QAAQ,QAAS,IACxDL,EAAOE,KAGT,OACE,uBAAKI,UAAW,OAAQC,GAAI,cAC1B,wBACEC,aAAc,SAEd,6BACE,wBAAMF,UAAW,cAAjB,6BAGA,yBACEF,MAAOR,EACPa,KAAM,QACNV,SAAUA,EAASD,GACnBY,KAAK,OACLC,QAAQ,YAGZ,6BACE,wBAAML,UAAW,cAAjB,6BAGA,yBACEF,MAAOT,EACPc,KAAM,QACNV,SAAUA,EAASF,GACnBa,KAAK,OACLC,QAAQ,gBC3CPC,G,MAAmB,SAACC,GAAD,OAAiCA,GAAK,GACnEC,WACAT,QAAQ,wBAAyB,OAkB9BU,EANa,CACjB,wFACA,2CACA,gFAGgCC,KAAI,SAAAC,GAAC,OAAK,sBAAIC,IAAKD,IAhB7BE,EAgByCF,EAf/D,qBACEG,KAAMD,EACNE,IAAI,sBACJC,OAAO,UAENH,KANkB,IAACA,KAkBXI,EAAU,SAAC7B,GAAsC,IAE1DE,EAEEF,EAFFE,MACAD,EACED,EADFC,MAGI6B,EAAcC,SAAS7B,EAAO,IAC9B8B,EAAcD,SAAS9B,EAAO,IAC9BgC,EAAoBD,EAAcF,EAArB,IACbI,GAAaJ,EAAcE,GAAe,EAC1CG,EAAcjB,EAAiBkB,KAAKC,MAAMP,EAAeI,EAAY,IACrEI,EAAcpB,EAAiBkB,KAAKC,MAAML,EAAeE,EAAY,IAGrEK,EAAc,CAClB,CACEC,KAJkBtB,EAAiBkB,KAAKC,MAAMH,IAK9CO,MAAO,WAET,CACED,KAAMF,EACNG,MAAO,SAET,CACED,KAAML,EACNM,MAAO,UAIX,OACE,gCACIX,EAAc,GAAKE,EAAc,GACnC,sBAAIpB,UAAW,OAAQ8B,MAAO,mBAC5B,gDAGA,0BACE,8BAAST,EAAT,MAGAM,EAAYjB,KAAI,SAAAqB,GAAC,OACf,gBAAC,WAAD,CAAgBnB,IAAKmB,EAAEF,OACrB,0BACGE,EAAEF,OAEL,0BACE,8BAASE,EAAEH,KAAX,UAKR,mCAGA,0BACE,qCAEF,+CAGA,0BACE,wCAIJ,kKAIA,sCACA,0BACGnB,KCxEMuB,EAxBH,WAAoB,IAAD,EACHC,IAAMC,SAAiB,IADpB,mBACtB5C,EADsB,KACfE,EADe,OAEHyC,IAAMC,SAAiB,IAFpB,mBAEtB7C,EAFsB,KAEfE,EAFe,KAIvB4C,EAA6B,CACjC7C,QACAD,SAGI+C,EAAgC,eACjCD,EADiC,CAEpC3C,WACAD,aAGF,OACE,yBAAKU,GAAG,OACN,mDACA,kBAAC,EAAemC,GAChB,kBAAC,EAAYD,KCZCE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDkIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.283714f9.chunk.js","sourcesContent":["import * as React from 'react'\nimport './Calculator.css'\n\nexport interface CalculatorProps {\n  water: string\n  flour: string\n  setWater: React.Dispatch<React.SetStateAction<string>>\n  setFlour: React.Dispatch<React.SetStateAction<string>>\n}\n\nexport const Calculator = (props: CalculatorProps): JSX.Element => {\n  const {\n    water,\n    flour,\n    setWater,\n    setFlour,\n  } = props\n\n  const onChange = (\n    setter: React.Dispatch<React.SetStateAction<string>>\n  ) => (e: React.ChangeEvent<HTMLInputElement>): void => {\n    const newValue = e.currentTarget.value.replace(/[^\\d]/, '')\n    setter(newValue)\n  }\n\n  return (\n    <div className={'half'} id={'calculator'}>\n      <form\n        autoComplete={'false'}\n      >\n        <label>\n          <span className={'label-text'}>\n            Original recipe flour (g)\n          </span>\n          <input\n            value={flour}\n            name={'water'}\n            onChange={onChange(setFlour)}\n            type='text'\n            pattern='[0-9]*'\n          />\n        </label>\n        <label>\n          <span className={'label-text'}>\n            Original recipe water (g)\n          </span>\n          <input\n            value={water}\n            name={'water'}\n            onChange={onChange(setWater)}\n            type='text'\n            pattern='[0-9]*'\n          />\n        </label>\n      </form>\n    </div>\n  )\n}\n","import * as React from 'react'\nimport './Display.css'\n\nexport interface DisplayProps {\n  flour: string\n  water: string\n}\n\nexport const numberWithCommas = (x: string | number): string => (x || 0)\n  .toString()\n  .replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')\n\nexport const linkify = (link: string): JSX.Element => (\n  <a\n    href={link}\n    rel='noopener noreferrer'\n    target='_blank'\n  >\n    {link}\n  </a>\n)\n\nconst references = [\n  'https://cnz.to/tips-tricks/converting-yeast-based-recipes-to-use-a-sourdough-starter/',\n  'http://www.wildyeastblog.com/going-wild/',\n  'http://www.thefreshloaf.com/node/34811/how-use-sourdough-starter-place-yeast',\n]\n\nconst referenceLinks = references.map(r => (<li key={r}>{linkify(r)}</li>))\n\nexport const Display = (props: DisplayProps): JSX.Element => {\n  const {\n    flour,\n    water,\n  } = props\n\n  const flourNumber = parseInt(flour, 10)\n  const waterNumber = parseInt(water, 10)\n  const percentage = 100 * (waterNumber / flourNumber)\n  const sourdough = (flourNumber + waterNumber) / 6\n  const flourResult = numberWithCommas(Math.round(flourNumber - (sourdough / 2)))\n  const waterResult = numberWithCommas(Math.round(waterNumber - (sourdough / 2)))\n  const starterResult = numberWithCommas(Math.round(sourdough))\n\n  const displayData = [\n    {\n      data: starterResult,\n      label: 'Starter',\n    },\n    {\n      data: waterResult,\n      label: 'Water'\n    },\n    {\n      data: flourResult,\n      label: 'Flour',\n    },\n  ]\n\n  return (\n    <>\n      {(flourNumber > 0 && waterNumber > 0) &&\n      <dl className={'half'} title={'Modified recipe'}>\n        <dt>\n          Baker&apos;s percentage\n        </dt>\n        <dd>\n          <strong>{percentage}%</strong>\n        </dd>\n        {\n          displayData.map(d => (\n            <React.Fragment key={d.label}>\n              <dt>\n                {d.label}\n              </dt>\n              <dd>\n                <strong>{d.data}g</strong>\n              </dd>\n            </React.Fragment>\n          ))\n        }\n        <dt>\n          Yeast\n        </dt>\n        <dd>\n          <strong>0g</strong>\n        </dd>\n        <dt>\n          Other ingredients\n        </dt>\n        <dd>\n          <i>no change</i>\n        </dd>\n      </dl>\n      }\n      <p>\n        Note: sourdough starters take longer than dried yeast!\n        You&apos;ll probably need to increase the fermentation time in your desired recipe.\n      </p>\n      <p>See also:</p>\n      <ul>\n        {referenceLinks}\n      </ul>\n    </>\n  )\n}\n","import React from 'react'\nimport './App.css'\nimport { Calculator, CalculatorProps } from './Calculator/Calculator'\nimport { Display, DisplayProps } from './Display/Display'\n\nconst App = (): JSX.Element => {\n  const [flour, setFlour] = React.useState<string>('')\n  const [water, setWater] = React.useState<string>('')\n\n  const displayProps: DisplayProps = {\n    flour,\n    water,\n  }\n\n  const calculatorProps: CalculatorProps = {\n    ...displayProps,\n    setFlour,\n    setWater,\n  }\n\n  return (\n    <div id='App'>\n      <h1>Sourdough converter</h1>\n      <Calculator {...calculatorProps} />\n      <Display {...displayProps} />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}