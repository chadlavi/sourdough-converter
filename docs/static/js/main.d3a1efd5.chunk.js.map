{"version":3,"sources":["Calculator/Calculator.tsx","Display/Display.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Calculator","props","water","flour","setWater","setFlour","onChange","setter","e","newValue","parseFloat","currentTarget","value","console","log","id","htmlFor","name","type","inputMode","pattern","min","numberWithCommas","x","toString","replace","Display","percentage","toFixed","sourdough","flourResult","Math","round","waterResult","displayData","data","label","title","map","d","key","referenceLinks","r","link","href","App","React","useState","displayProps","calculatorProps","showDisplay","Boolean","spacing","size","margins","style","textAlign","fontSize","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d3a1efd5.chunk.js","sourcesContent":["import * as React from 'react'\nimport { Input, Grid, GridItem, Label } from '@chadlavi/clear'\n\nexport interface CalculatorProps {\n  water: number | undefined\n  flour: number | undefined\n  setWater: React.Dispatch<React.SetStateAction<number | undefined>>\n  setFlour: React.Dispatch<React.SetStateAction<number | undefined>>\n}\n\nexport const Calculator = (props: CalculatorProps): JSX.Element => {\n  const {\n    water,\n    flour,\n    setWater,\n    setFlour,\n  } = props\n\n  const onChange = (\n    setter: React.Dispatch<React.SetStateAction<number | undefined>>\n  ) => (e: React.ChangeEvent<HTMLInputElement>): void => {\n    const newValue = parseFloat(e.currentTarget.value || '0')\n    console.log(newValue)\n    setter(newValue)\n  }\n\n  return (\n    <div id={'calculator'}>\n      <Grid>\n        <GridItem>\n          <Label htmlFor='flour'>Original recipe flour (g)</Label>\n          <Input\n            value={flour}\n            name={'flour'}\n            onChange={onChange(setFlour)}\n            id={'flour'}\n            type={'number'}\n            inputMode={'decimal'}\n            pattern={'[0-9]*'}\n            min={0}\n          />\n        </GridItem>\n        <GridItem>\n          <Label htmlFor='water'>Original recipe water (g)</Label>\n          <Input\n            value={water}\n            name={'water'}\n            onChange={onChange(setWater)}\n            type={'number'}\n            inputMode={'decimal'}\n            pattern={'[0-9]*'}\n            min={0}\n          />\n        </GridItem>\n      </Grid>\n    </div>\n  )\n}\n","import * as React from 'react'\nimport './Display.css'\n\nexport interface DisplayProps {\n  flour: number | undefined\n  water: number | undefined\n}\n\nexport const numberWithCommas = (x: string | number): string => (x || 0)\n  .toString()\n  .replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')\n\nexport const Display = (props: DisplayProps): JSX.Element => {\n  const {\n    flour = 0,\n    water = 0,\n  } = props\n\n  const percentage = (100 * (water / flour)).toFixed(2)\n  const sourdough = (flour + water) / 6\n  const flourResult = numberWithCommas(Math.round(flour - (sourdough / 2)))\n  const waterResult = numberWithCommas(Math.round(water - (sourdough / 2)))\n  const starterResult = numberWithCommas(Math.round(sourdough))\n\n  const displayData = [\n    {\n      data: starterResult,\n      label: 'Starter',\n    },\n    {\n      data: waterResult,\n      label: 'Water'\n    },\n    {\n      data: flourResult,\n      label: 'Flour',\n    },\n  ]\n\n  return (\n    <>\n      <dl title={'Modified recipe'}>\n        <dt>\n          Baker&apos;s percentage\n        </dt>\n        <dd>\n          <strong>{percentage}%</strong>\n        </dd>\n        {\n          displayData.map(d => (\n            <React.Fragment key={d.label}>\n              <dt>\n                {d.label}\n              </dt>\n              <dd>\n                <strong>{d.data}g</strong>\n              </dd>\n            </React.Fragment>\n          ))\n        }\n        <dt>\n          Yeast\n        </dt>\n        <dd>\n          <strong>0g</strong>\n        </dd>\n        <dt>\n          Other ingredients\n        </dt>\n        <dd>\n          <i>no change</i>\n        </dd>\n      </dl>\n    </>\n  )\n}\n","import React from 'react'\nimport { Calculator, CalculatorProps } from './Calculator/Calculator'\nimport { Display, DisplayProps } from './Display/Display'\nimport {\n  CSSVariables,\n  GlobalStyles,\n  Grid,\n  GridItem,\n  Header,\n  Link,\n  Page,\n  Paragraph,\n} from '@chadlavi/clear'\n\nexport const linkify = (link: string): JSX.Element => (\n  <Link\n    href={link}\n  >\n    {link}\n  </Link>\n)\n\nconst references = [\n  'https://cnz.to/tips-tricks/converting-yeast-based-recipes-to-use-a-sourdough-starter/',\n  'http://www.wildyeastblog.com/going-wild/',\n  'http://www.thefreshloaf.com/node/34811/how-use-sourdough-starter-place-yeast',\n]\n\nconst referenceLinks = references.map(r => (<li key={r}>{linkify(r)}</li>))\n\n\nconst App = (): JSX.Element => {\n  const [flour, setFlour] = React.useState<number|undefined>()\n  const [water, setWater] = React.useState<number|undefined>()\n\n  const displayProps: DisplayProps = {\n    flour,\n    water,\n  }\n\n  const calculatorProps: CalculatorProps = {\n    ...displayProps,\n    setFlour,\n    setWater,\n  }\n\n  const showDisplay = Boolean(flour && flour > 0 && water && water > 0)\n\n  return (\n    <>\n      <CSSVariables />\n      <GlobalStyles />\n      <Page>\n        <Grid spacing={16}>\n          <GridItem>\n            <Header>Sourdough converter</Header>\n          </GridItem>\n          <GridItem size={showDisplay ? 8 : 12}>\n            <Calculator {...calculatorProps} />\n          </GridItem>\n          {showDisplay && <GridItem size={4}>\n            <Display {...displayProps} />\n          </GridItem>}\n          <GridItem>\n            <Paragraph>\n              Note: sourdough starters take longer than dried yeast!\n              You&apos;ll probably need to increase the fermentation time in your desired recipe.\n            </Paragraph>\n            <Paragraph>See also:</Paragraph>\n            <ul>\n              {referenceLinks}\n            </ul>\n          </GridItem>\n          <GridItem>\n            <Paragraph margins={false} style={{textAlign: 'right', fontSize: 'var(--clear-font-size-label)'}}>\n              Built with <Link href={'https://chadlavi.github.io/clear/'}>Clear</Link>\n            </Paragraph>\n          </GridItem>\n        </Grid>\n      </Page>\n    </>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}